name: Nessus Scan on Akaunting

on:
  push:
    branches:
      - main

jobs:
  setup-and-scan:
    runs-on: ubuntu-latest

    steps:
    # Étape 1 : Vérifier le code
    - name: Checkout Code
      uses: actions/checkout@v3

    # Étape 2 : S'assurer que Docker est installé
    - name: Ensure Docker is Installed
      run: |
        docker --version || (sudo apt-get update && sudo apt-get install -y docker.io)

    # Étape 3 : Lancer MySQL
    - name: Start MySQL Container
      run: |
        docker run --name akaunting-mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=akaunting -d mysql:5.7
        sleep 20 # Attendre que MySQL démarre correctement

    # Étape 4 : Lancer Akaunting
    - name: Start Akaunting Container
      run: |
        docker run --name akaunting --link akaunting-mysql:mysql -e DB_CONNECTION=mysql -e DB_HOST=mysql -e DB_DATABASE=akaunting -e DB_USERNAME=root -e DB_PASSWORD=root -d akaunting/akaunting
        sleep 20 # Attendre que l'application démarre correctement

    # Étape 5 : Lancer Nessus dans un conteneur Docker
    - name: Start Nessus Container
      run: |
        docker run --name nessus -d -p 8834:8834 tenable/nessus
        sleep 60 # Attendre que Nessus démarre correctement

    # Étape 6 : Récupérer l'IP du conteneur Akaunting
    - name: Get Akaunting Container IP
      id: akaunting_ip
      run: |
        export AKAUNTING_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' akaunting)
        echo "AKAUNTING_IP=$AKAUNTING_IP" >> $GITHUB_ENV

    # Étape 7 : Authentification avec l'API Nessus
    - name: Authenticate with Nessus
      id: auth
      run: |
        response=$(curl -X POST -H "Content-Type: application/json" \
          -d '{"username": "nourelhoda", "password": "nourelhoda"}' \
          https://localhost:8834/session)
        token=$(echo $response | jq -r '.token')
        echo "NESSUS_TOKEN=$token" >> $GITHUB_ENV

    # Étape 8 : Obtenir l'UUID du modèle de scan
    - name: Get Scan Template UUID
      id: get_template_uuid
      run: |
        response=$(curl -X GET -H "X-Cookie: token=$NESSUS_TOKEN" \
          https://localhost:8834/editor/policies)
        scan_template_uuid=$(echo $response | jq -r '.policies[0].uuid')
        echo "SCAN_TEMPLATE_UUID=$scan_template_uuid" >> $GITHUB_ENV

    # Étape 9 : Créer un scan dans Nessus
    - name: Create Nessus Scan
      run: |
        response=$(curl -X POST -H "X-Cookie: token=$NESSUS_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{
                "uuid": "$SCAN_TEMPLATE_UUID",
                "settings": {
                  "name": "Akaunting Scan",
                  "text_targets": "$AKAUNTING_IP",
                  "description": "Scan de sécurité pour l'application Akaunting"
                }
              }' https://localhost:8834/scans)
        scan_id=$(echo $response | jq -r '.scan.id')
        echo "SCAN_ID=$scan_id" >> $GITHUB_ENV

    # Étape 10 : Lancer le scan Nessus
    - name: Launch Nessus Scan
      run: |
        curl -X POST -H "X-Cookie: token=$NESSUS_TOKEN" \
          https://localhost:8834/scans/$SCAN_ID/launch

    # Étape 11 : Télécharger les résultats du scan
    - name: Download Nessus Scan Results
      run: |
        curl -X GET -H "X-Cookie: token=$NESSUS_TOKEN" \
          https://localhost:8834/scans/$SCAN_ID/export?format=nessus \
          -o nessus_scan_results.nessus

    # Étape 12 : Stocker les résultats du scan
    - name: Upload Scan Results
      uses: actions/upload-artifact@v3
      with:
        name: nessus-scan-results
        path: nessus_scan_results.nessus
